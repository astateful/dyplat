; ModuleID = 'mcjit_module_0'

define double @binary58(double %x, double %y) {
entry:
  %y2 = alloca double
  %x1 = alloca double
  store double %x, double* %x1
  store double %y, double* %y2
  %y3 = load double, double* %y2
  ret double %y3
}

define double @fib(double %x) {
entry:
  %x1 = alloca double
  store double %x, double* %x1
  %x2 = load double, double* %x1
  %cmptmp = fcmp ult double %x2, 3.000000e+00
  %booltmp = uitofp i1 %cmptmp to double
  %ifcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %entry
  br label %ifcont

else:                                             ; preds = %entry
  %x3 = load double, double* %x1
  %subtmp = fsub double %x3, 1.000000e+00
  %calltmp = call double @fib(double %subtmp)
  %x4 = load double, double* %x1
  %subtmp5 = fsub double %x4, 2.000000e+00
  %calltmp6 = call double @fib(double %subtmp5)
  %addtmp = fadd double %calltmp, %calltmp6
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi double [ 1.000000e+00, %then ], [ %addtmp, %else ]
  ret double %iftmp
}

define double @iter(double %x) {
entry:
  %i = alloca double
  %c = alloca double
  %b = alloca double
  %a = alloca double
  %x1 = alloca double
  store double %x, double* %x1
  store double 1.000000e+00, double* %a
  store double 1.000000e+00, double* %b
  store double 0.000000e+00, double* %c
  store double 3.000000e+00, double* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %a2 = load double, double* %a
  %b3 = load double, double* %b
  %addtmp = fadd double %a2, %b3
  store double %addtmp, double* %c
  %b4 = load double, double* %b
  store double %b4, double* %a
  %binop = call double @binary58(double %addtmp, double %b4)
  %c5 = load double, double* %c
  store double %c5, double* %b
  %binop6 = call double @binary58(double %binop, double %c5)
  %i7 = load double, double* %i
  %x8 = load double, double* %x1
  %cmptmp = fcmp ult double %i7, %x8
  %booltmp = uitofp i1 %cmptmp to double
  %i9 = load double, double* %i
  %nextvar = fadd double %i9, 1.000000e+00
  store double %nextvar, double* %i
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %b10 = load double, double* %b
  %binop11 = call double @binary58(double 0.000000e+00, double %b10)
  ret double %binop11
}
